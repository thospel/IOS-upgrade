# Determizne target IOS

[Define]
fake = shell-test-cisco
image=
have_image_file=
have_rom_file=
valid_image=
old_rom_id=
valid_rom=
device_name = ${global.device_name}
probe = ${caller.probe}

# Run show version, filter and store result in variable 'version'
# version = System image file is "bootflash:asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext."
[Commands DefineVariable=version]
show version | include ^[Ss]ystem image file is|_uptime is

# Extract uptime
[If Regex, FromVariable=version,Anchor=Substring]
\ uptime is (?<uptime>.*)

# Extract the actual system image name into variable image. So after this:
#    image = bootflash:asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext.
[If Regex, IgnoreCase, FromVariable=version]
System image file is "(?<result>.*)"
    [Assign]
    image = ${result}
[Else]
    [Error]
    'show version' output does not contain 'System image file is "XXXX"'
[EndIf]

# Fake image on device named 'shell-test-cisco' for development
[If FromVariable=device_name]
shell-test-cisco
    [Assign]
    image = flash:c3900-universalk9-mz.SPA.156-3.M8.bin
[EndIf]

# Sometimes the image is something like bootflash:packages.conf
# or even flash:cat3k_caa-universalk9.16.03.07.SPA.conf
# For these we immediately exit with a dedicated error message
[If Regex,FromVariable=image,Any]
.*\.conf
.*:unknown

  [Error]
  Parsing current system image "${image}" is not supported
[EndIf]

# Image names should end on .bin (possibly truncated)
# Otherwise we don't really know if we have enough string for a proper parse
[If Not,Regex,FromVariable=image]
.*\.(?:b(?:in?)?)?
  [Error]
  Current system image '${image}' does not end with '.bin'
[EndIf]

# Parse something like
#    bootflash:asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext.b
# Into:
#   filesystem = bootflash
#   series = asr1000rp1
#   features = adventerprisek9
#   compressed =   (empty string, would be -mz for compressed images)
#   old_release = 03.16.01a.S.155-3.S1a-ext
#   old_path = asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext.b
#   old_file = asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext
# old_file is the part of old_path after the last / which happens with
# directories
# old_file is without .bin
[If Not,Regex, Verbose, FromVariable=image, Single]

# Filesystem name can contain - (e.g. 'sup-bootdisk' on USHOUWTCMP650)
(?<filesystem>[\w-]+) :
(?<old_path>
    # Directory part
    (?:.*/)?
    (?<old_file>
        (?<series>\w+?)
        (?:
            # Suppport things like
            #    cat9k_iosxe.16.12.02.SPA.bin
            #    cat3k_caa-universalk9.SPA.03.02.00.SE.150-1.EX.bin
            _ (?<software>\w+) |
              (?<software>)
        )
        (?:
            # Features is optional
            - (?<features>\w+) |
              (?<features>)
        )
        (?<compressed>-mz|)
        \.
        (?<old_release>.*)
    )
    \.
    # The .bin part is sometimes truncated
    (?:b(?:in?)?)?
)

    [Error]
    Could not parse image ${image}
[Else]
    [Include File=IOS.table.actions.txt]
    argument: probe
    argument: series

    define: new_file = ${return.image}
    define: new_md5  = ${return.md5}
    define: verify
    define: ftp
    define: debug
    define: rom_file
    define: rom_id
    define: rom_md5

    [If Not,FromVariable=debug]
    0
        [Print]
        filesystem = ${filesystem}
        series = ${series}
        software = ${software}
        features = ${features}
        compressed = ${compressed}
        release  = ${old_release}
        old_path = ${old_path}
        old_file = ${old_file}
        new_file = ${new_file}
        rom_file = ${rom_file}
        rom_id   = ${rom_id}
        rom_md5  = ${rom_md5}
    [EndIf]

    [If FromVariable=new_file]
    ${}

        [If FromVariable=probe]
        1
            [Assign]
            valid_image=?
            have_image_file=?
        [Else]
            [Error]
            Assertion: dir on unknown new image
        [EndIf]
    [Else]
        # Do we have the new image ?
        [Commands DefineVariable=file_check, IgnoreError]
        dir ${filesystem}:${new_file}

        [If Regex,Anchor=Substring,FromVariable=file_check]
        \  ${new_file}$

            [Assign]
            have_image_file=1

        [ElseIf Regex,Anchor=Substring,FromVariable=file_check]
        %Error .*

            [Assign]
            have_image_file=0

        [ElseIf Regex,Anchor=Substring,FromVariable=file_check]
        Command authorization failed

            [If FromVariable=probe]
            1
                [Assign]
                have_image_file=?
            [Else]
                [Error]
                Command 'dir': ${file_check}
            [EndIf]

        [Else]
            [Error]
            Cannot parse output from dir ${filesystem}:${new_file}
            ${file_check}
        [EndIf]

        # Is an upgrade needed ?
        [If Regex, FromVariable=new_file]
        ${old_file}(\.bin|bin|in|n|)
            [Assign]
            valid_image=1
        [Else]
            [Assign]
            valid_image=0
        [EndIf]
    [EndIf]

    # Do we want a specific ROM ?
    [If FromVariable=rom_file]
    ${}
        [If FromVariable=probe]
        1
            [Include File=IOS.platform.actions.txt]
            argument: probe
            define: old_rom_id0 = ${return.firmware}

            [Assign]
            old_rom_id = ${old_rom_id0}
            have_rom_file=?
            valid_rom=?

        [Else]
            [Assign]
            have_rom_file=1
            valid_rom=1
        [EndIf]
    [Else]
        # Do we have the new ROM ?
        [Commands DefineVariable=file_check, IgnoreError]
        dir ${filesystem}:${rom_file}

        [If Regex,Anchor=Substring,FromVariable=file_check]
        \  ${rom_file}$

            [Assign]
            have_rom_file=1

        [ElseIf Regex,Anchor=Substring,FromVariable=file_check]
        %Error .*

            [Assign]
            have_rom_file=0

        [ElseIf Regex,Anchor=Substring,FromVariable=file_check]
        Command authorization failed

            [If FromVariable=probe]
            1
                [Assign]
                have_rom_file=?
            [Else]
                [Error]
                Command 'dir': ${file_check}
            [EndIf]

        [Else]
            [Error]
            Cannot parse output from dir ${filesystem}:${rom_file}
            ${file_check}
        [EndIf]

        [Include File=IOS.platform.actions.txt]
        argument: probe
        define: old_rom_id0 = ${return.firmware}

        [Assign]
        old_rom_id = ${old_rom_id0}

        [If FromVariable=rom_id]
        ${old_rom_id}
            [Assign]
            valid_rom=1
        [Else]
            [Assign]
            valid_rom=0
        [EndIf]
    [EndIf]

    [If Not,FromVariable=debug]
    0
        [Print]
        have_image_file = ${have_image_file}
        valid_image     = ${valid_image}
        have_rom_file   = ${have_rom_file}
        old_rom_id      = ${old_rom_id}
        valid_rom       = ${valid_rom}
    [EndIf]

    [Return]
    debug        = ${debug}
    verify       = ${verify}
    ftp          = ${ftp}
    series       = ${series}
    filesystem   = ${filesystem}
    uptime       = ${uptime}

    old_file     = ${old_path}
    new_file     = ${new_file}
    new_md5      = ${new_md5}
    have_image_file = ${have_image_file}
    valid_image  = ${valid_image}

    old_rom_id   = ${old_rom_id}
    rom_file     = ${rom_file}
    rom_id       = ${rom_id}
    rom_md5      = ${rom_md5}
    have_rom_file = ${have_rom_file}
    valid_rom    = ${valid_rom}
[EndIf]
