# Determine target IOS

[Define]
fake = shell-test-cisco
debug_truncate=
filesystem=
uptime=
image=
prefix=
have_image_file=
have_rom_file=
valid_image=
old_rom_id=
valid_rom=
device_name = ${global.device_name}
probe = ${caller.probe}

# Run show version, filter and store result in variable 'version'
# version = System image file is "bootflash:asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext."
[Commands DefineVariable=version]
show version | include ^[Ss]ystem image file is|_uptime is

# Extract uptime
[If Not,Regex, FromVariable=version,Anchor=Substring]
\ uptime is (?<up>.*)
    [Error]
    'show version' output does not contain device uptime
[Else]
    [Assign]
    uptime = ${up}
[EndIf]

# Extract the actual system image name into variable image. So after this:
#    filesystem = bootflash
#    image      = asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext.
[If Not,Regex, IgnoreCase, FromVariable=version]
System image file is "(?<full_image>.*)"

    [Error]
    'show version' output does not contain 'System image file is "XXXX"'

[Else]
    [If Not,FromVariable=debug_truncate,Any]
    ${}
    0+
        [If Regex,Anchor=Substring,FromVariable=full_image,DefineVariable=all]
        ^.{63}
            [Assign]
            full_image = ${all}
        [EndIf]
    [EndIf]

    # Notice that we remove any leading / from the image name
    # Filesystem name can contain - (e.g. 'sup-bootdisk' on USHOUWTCMP650)
    [If Not,Regex,FromVariable=full_image,Anchor=Substring]
    ^(?<before>[\w-]+):(?<absolute>/*)(?<after>.*)
        [Error]
        Cannot determine current IOS image from ${full_image}
    [Else]
        [Assign]
        filesystem = ${before}
        prefix =     ${absolute}
        image =      ${after}

        # The current image name should exist on the filesystem
        [Include File=stat.actions.txt]
        argument: filesystem
        argument: file = ${image}

        define: stat

        [If Not,FromVariable=stat]
        1
            # Image name not found. Maybe it was truncated to 63 characters..

            [If Regex,FromVariable=full_image]
            # Check for EXACTLY 63 characters.
            # Less means too short for truncation,
            # More means this system doesn't truncate
            .{63}
                [Define Substitute=Regex]
                image_regex = ${image}
                complete=

                [Commands DefineVariable=dir]
                show ${filesystem}: | include ${image_regex}

                # Two sorts of typical output lines:
                # 1. With filesystem.
                #    However the filesystem name and ${filesystem} can differ
                #    (eg. `show flash:` gives `/bootflash/XXX`)
                #   5         18 Aug 29 2019 07:16:57.0000000000 +00:00 /bootflash/test.txt
                # 2. Without filesystem:
                #     2  -rwx    18229248  Nov 24 2015 09:50:02 +00:00  c2960x-universalk9-mz.150-2.EX5.bin

                # We do not support the case where show filesystem: does not
                # recursively list the contents and our image is in a
                # subdirectory. In that case we will (incorrectly) error out
                # Fortunately this does not seem to happen on our network
                # If needed we can support this by using `dir file*`, but `dir`
                # is (currently) not allowed for a pure RO user

                [While Regex,FromVariable=dir]
                # Don't check for the specific filesystem. it can differ
                \s*\d+\s+.*\s+(?:/[^/]+/|)(?<full>${image}[^/]*)
                    [If FromVariable=complete]
                    ${}
                        [Assign]
                        complete=${full}
                    [ElseIf Not,FromVariable=complete]
                    # Sigh, we sometimes get multiple identical entries in flash
                    ${full}
                        [Error]
                        Multiple matches for file ${image}: ${complete} and ${full}
                    [EndIf]
                [Else]
                    [Error]
                    Could not not find (possible truncated) IOS image file ${filesystem}${image}
                [EndWhile]
                [Assign]
                image = ${complete}
            [Else]
                [Error]
                Could not find IOS image file ${filesystem}${image}
            [EndIf]
        [EndIf]
    [EndIf]
[EndIf]

# Fake image on device named 'shell-test-cisco' for development
[If FromVariable=device_name]
${fake}
    [Assign]
    filesystem = flash
    image =      c3900-universalk9-mz.SPA.156-3.M8.bin
[EndIf]

# Sometimes the image is something like bootflash:packages.conf
# or even flash:cat3k_caa-universalk9.16.03.07.SPA.conf
# For these we immediately exit with a dedicated error message
[If Not,Regex,FromVariable=image]
.*\.bin

  [Error]
  IOS image "${image}" does not end in .bin. This is not supported (yet)
[EndIf]

# Parse something like
#    asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext.bin
# Into:
#   series = asr1000rp1
#   features = adventerprisek9
#   compressed =   (empty string, would be -mz for compressed images)
#   old_release = 03.16.01a.S.155-3.S1a-ext
#   old_path = asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext.bin
#   old_file = asr1000rp1-adventerprisek9.03.16.01a.S.155-3.S1a-ext.bin
# old_file is the part of old_path after the last / which happens with
# directories
[If Not,Regex, Verbose, FromVariable=image, Single]

(?<old_path>
    # Directory part
    (?:.*/)?
    (?<old_file>
        (?<series>\w+?)
        (?:
            # Suppport things like
            #    cat9k_iosxe.16.12.02.SPA.bin
            #    cat3k_caa-universalk9.SPA.03.02.00.SE.150-1.EX.bin
            _ (?<software>\w+) |
              (?<software>)
        )
        (?:
            # Features is optional
            - (?<features>\w+) |
              (?<features>)
        )
        (?<compressed>-mz|)
        \.
        (?<old_release>.*)
        \.bin
    )
)

    [Error]
    Could not parse image ${image}
[Else]
    [Include File=IOS.table.actions.txt]
    argument: series
    argument: probe

    define: verify
    define: fetch
    define: reload
    define: debug
    define: speed_file
    define: speed_md5
    define: max_uptime
    define: uptime_exceeded = 0

    define: new_file = ${return.image}
    define: new_md5  = ${return.md5}

    define: rom_file
    define: rom_id
    define: rom_md5

    [If Regex,FromVariable=uptime,IgnoreCase,Anchor=Substring]
    \b${max_uptime}
        [Assign]
        uptime_exceeded = 1
    [EndIf]

    [If Not,FromVariable=debug]
    0
        [Print]
        filesystem = ${filesystem}
        series     = ${series}
        software   = ${software}
        features   = ${features}
        compressed = ${compressed}
        release    = ${old_release}
        uptime_exceeded = ${uptime_exceeded}

        old_path   = ${old_path}
        old_file   = ${old_file}
        new_file   = ${new_file}

        rom_file   = ${rom_file}
        rom_id     = ${rom_id}
        rom_md5    = ${rom_md5}
    [EndIf]

    [If FromVariable=new_file]
    ${}

        [If FromVariable=probe]
        1
            [Assign]
            valid_image=?
            have_image_file=?
        [Else]
            [Error]
            Assertion: stat on unknown new image
        [EndIf]
    [Else]
        # Do we have the new image ?
        [Include file=stat.actions.txt]
        argument: filesystem
        argument: file = ${new_file}

        define: stat

        [Assign]
        have_image_file = ${stat}

        # Is an upgrade needed ?
        [If Regex, FromVariable=old_file,Any]
        ${new_file}
        /${new_file}
            [Assign]
            valid_image=1
        [Else]
            [Assign]
            valid_image=0
        [EndIf]
    [EndIf]

    # Do we want a specific ROM ?
    [If FromVariable=rom_file]
    ${}
        [If FromVariable=probe]
        1
            [Include File=IOS.platform.actions.txt]
            argument: probe
            define: old_rom_id0 = ${return.firmware}

            [Assign]
            old_rom_id = ${old_rom_id0}
            have_rom_file=?
            valid_rom=?

        [Else]
            [Assign]
            have_rom_file=1
            valid_rom=1
        [EndIf]
    [Else]
        # Do we have the new ROM ?
        [Include file=stat.actions.txt]
        argument: filesystem
        argument: file = ${rom_file}

        define: stat

        [Assign]
        have_rom_file = ${stat}

        [Include File=IOS.platform.actions.txt]
        argument: probe
        define: old_rom_id0 = ${return.firmware}

        [Assign]
        old_rom_id = ${old_rom_id0}

        [If FromVariable=rom_id]
        ${old_rom_id}
            [Assign]
            valid_rom=1
        [Else]
            [Assign]
            valid_rom=0
        [EndIf]
    [EndIf]

    [If Not,FromVariable=debug]
    0
        [Print]
        have_image_file = ${have_image_file}
        valid_image     = ${valid_image}
        have_rom_file   = ${have_rom_file}
        old_rom_id      = ${old_rom_id}
        valid_rom       = ${valid_rom}
    [EndIf]

    [Return]
    debug        = ${debug}
    verify       = ${verify}
    fetch        = ${fetch}
    reload       = ${reload}
    speed_file   = ${speed_file}
    speed_md5    = ${speed_md5}
    max_uptime   = ${max_uptime}

    series       = ${series}
    filesystem   = ${filesystem}
    uptime       = ${uptime}
    uptime_exceeded = ${uptime_exceeded}

    old_file     = ${old_file}
    old_path     = ${prefix}${old_path}
    new_file     = ${new_file}
    new_md5      = ${new_md5}
    have_image_file = ${have_image_file}
    valid_image  = ${valid_image}

    old_rom_id   = ${old_rom_id}
    rom_file     = ${rom_file}
    rom_id       = ${rom_id}
    rom_md5      = ${rom_md5}
    have_rom_file = ${have_rom_file}
    valid_rom    = ${valid_rom}
[EndIf]
