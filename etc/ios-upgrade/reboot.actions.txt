[Define]
fake        = ${caller.fake}
old_verify  = ${caller.old_verify}
new_verify  = ${caller.new_verify}
reload      = ${caller.reload}
filesystem  = ${caller.filesystem}
uptime_exceeded = ${caller.uptime_exceeded}

old_path    = ${caller.old_path}
new_file    = ${caller.new_file}
new_md5     = ${caller.new_md5}
have_image_file  = ${caller.have_image_file}
valid_image = ${caller.valid_image}

rom_file    = ${caller.rom_file}
rom_md5     = ${caller.rom_md5}
rom_id      = ${caller.rom_id}
have_rom_file  = ${caller.have_rom_file}
valid_rom   = ${caller.valid_rom}

message=

# Is an upgrade needed ?
[If FromVariable=valid_image]
1
    [If FromVariable=valid_rom]
    1
        [If FromVariable=rom_file]
        ${}
            [Return]
            message = ${message} No reload (Already running target IOS)
            progress = 0
        [Else]
            [Return]
            message = ${message} No reload (Already running target IOS and ROM)
            progress = 0
        [EndIf]
    [EndIf]
[EndIf]

# No need to verify old path if new file already verified and they are the same
[If FromVariable=old_verify]
1
    [If FromVariable=new_verify]
    0
        [If FromVariable=valid_image]
        1
            [Assign]
            old_verify = 0
        [EndIf]
    [EndIf]
[EndIf]

[If FromVariable=uptime_exceeded]
1
    [Print]
    Excessive uptime. Preventative reboot to the old IOS image ${old_path}

    # ${message} is set later when we change the config

    # IOS.actions.txt already did a stat on ${old_path}
    [Assign]
    new_md5 =
    new_file = ${old_path}
    # Avoid accidents
    old_path = dummy
    valid_image = 0
    have_image_file = 1
    new_verify = ${old_verify}
    old_verify = 0

    valid_rom = 1
    have_rom_file = 1
    rom_md5 = ?
    # Needs to be empty to avoid "No ROM upgrade needed" message
    rom_file =
[EndIf]

[If Not,FromVariable=have_image_file]
1

    [Error]
    Image File ${new_file} is not in flash. Please run the pre upgrade script (IOS-upgrade.prepare) first

[EndIf]

[If Not,FromVariable=have_rom_file]
1

    [Error]
    ROM File ${rom_file} is not in flash. Please run the pre upgrade script (IOS-upgrade.prepare) first
[EndIf]

[If Not,FromVariable=valid_image]
1
    [If Not,FromVariable=old_verify]
    0
        # Also verify the old image since we might want to roll back
        [Include File=verify.actions.txt]
        argument: file    = ${filesystem}:${old_path}
        argument: md5     =
        argument: context = Verify failure for old image
    [EndIf]
[EndIf]

[If Not,FromVariable=new_verify]
0
    # Verify the new image
    [Include File=verify.actions.txt]
    argument: file    = ${filesystem}:${new_file}
    argument: md5     = ${new_md5}
    argument: context = Verify failure for new image

    [If Not,FromVariable=valid_rom]
    1
        [If Not,FromVariable=rom_file]
        ${}
            # Verify the new ROM
            [Include File=verify.actions.txt]
            argument: file    = ${filesystem}:${rom_file}
            argument: md5     = ${rom_md5}
            argument: context = Verify failure for new ROM
        [EndIf]
    [EndIf]
[EndIf]

[If Not,FromVariable=fake,Anchor=FullString]
${}
    [OK]
    Aborting fake device
[EndIf]

[Commands Single=True]
copy run ${filesystem}:config_${global.job_utc:%Y-%m-%dT%H:%M:%SZ}
${}
${}

[If Not,FromVariable=valid_rom]
1
    [Commands]
    upgrade rom-monitor filename ${filesystem}:${rom_file} all

    [Assign]
    message = ${message} Upgraded ROM.
[ElseIf Not,FromVariable=rom_file]
${}
    message = ${message} No ROM upgrade needed.
[EndIf]

[Configure]
no boot system
boot system flash ${filesystem}:${new_file}
boot system flash

[Apply]

[If Not,FromVariable=valid_image]
1
    [If FromVariable=uptime_exceeded]
    1
        [If Not,FromVariable=message]
        ${}
            # message should be empty here since we should skip all actions
            [Bug]
            Unexpected alreade prepared message:${message}
        [EndIf]

        [Assign]
        message = ${message} Excessive uptime. Set reload to old IOS
    [Else]
        [Assign]
        message = ${message} Set reload to new IOS.
    [EndIf]
[EndIf]

[If FromVariable=reload]
1
    # prepare.actions.txt already does a verify
    [Commands Single=True, Disconnect=True]
    reload /noverify
    ${}
    ${}

    [Print]
    Connection lost. Reload in progress

    [Return]
    message = ${message} Reload in progress
    progress = 1
[Else]
    [Return]
    message = ${message} Do a manual 'reload /noverify' (setting reload=${reload})
    progress = 1
[EndIf]
