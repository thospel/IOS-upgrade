# Determine transfer speed

[Define]
cleanup=
error=
speeds = ${ [] }
filesystem = ${caller.filesystem}
file = ${caller.file}
md5 = ${caller.md5}
names = ${ (name or "default" for name in global.fileservers) }
urls  = ${ "\n".join(fs.url() for fs in global.fileservers.values()) }
Speed = ${ collections.namedtuple("FileServerSpeed", "name url speed valid error".split()) }

[If FromVariable=file]
${}
    [Error]
    IOS file: Missing SpeedFile setting
[EndIf]

[While Regex,FromVariable=urls,DefineVariable=url]
.+
    [Define]
    name = ${ next(names) }

    [Assign]
    cleanup =

    [Commands Single,IgnoreError]
    del ${filesystem}:${file}
    ${}
    ${}
    ${}

    [Include File=fileserver.actions.txt]
    argument: url
    argument: filesystem
    argument: file
    argument: overwrite=0
    argument: ignore_error = 1

    define: speed
    define: error_line
    define: new_speed =
    define: valid = ${True}

    [If FromVariable=error_line]
    ${}
        # No error
        [Assign]
        cleanup = 1

        [If Not,FromVariable=md5]
        ${}
            # Currently we don't really use this. Should just drop it
            [Include File=verify.actions.txt]
            argument: context = Transfer speed test file verify failure
            argument: file = ${filesystem}:${file}
            argument: md5
        [EndIf]
    [Else]
        [If FromVariable=error]
        ${}
            [Assign]
            error = ${error_line}
        [EndIf]

        [If FromVariable=error_line,IgnoreCase,Anchor=SubString]
        No such file or directory
            # We will keep this one in the "valid" list
            # Maybe it's just the speed test file that is missing
            [Assign]
            speed = -1
        [Else]
            # This seems to be a real error. Drop it from the "valid" list
            [Assign]
            valid = ${False}
            speed = -2
        [EndIf]
    [EndIf]
    [Assign]
    speeds = ${ speeds + [Speed(name, url, int(speed), valid, error_line)] }
[Else]
    [Bug]
    No URLs
[EndWhile]

[If Not,FromVariable=cleanup]
${}
    [Commands Single]
    del ${filesystem}:${file}
    ${}
    ${}
    ${}
[EndIf]

[Define]
# This causes a BUG if names is not exhausted
dummy = ${ "" if next(names, None) is None else None }

[Return]
error
speeds
speeds_sorted = ${ sorted(speeds, key = lambda x: x.speed, reverse=True) }
